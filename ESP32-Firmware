#include <Arduino.h>
#include <ESP32Servo.h>
#include <SPIFFS.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <vector>

// Wi-Fi credentials
const char* ssid = "o2-WLAN63";          // Replace with your Wi-Fi SSID
const char* password = "F7DN8BTG3NF377TC";  // Replace with your Wi-Fi Password

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Define servo pins
const int servoPins[6] = {13, 12, 14, 27, 26, 25};
Servo servos[6];
const int invertedServoIndex = 2; // Index of the upper arm servo (0-based). Set to -1 if no servos are inverted.

// LED Pin for Debugging
const int ledPin = 2; // Use GPIO 2 for the LED

// Define storage limits
const int MAX_SEQUENCES = 10;                 // Maximum number of sequences allowed
const size_t MAX_STORAGE_BYTES = 1024 * 1024;  // 512KB total storage

// Variables for file upload
bool isUploading = false;
File uploadFile;
size_t uploadFileSize = 0;
size_t bytesReceived = 0;

// Function prototypes
std::vector<String> getSequenceList();
size_t getCurrentStorageUsage();
int getSequenceCount();
void handleServoCommand(const String& command);
void executeSequence(String sequenceName, int speed); // Updated function prototype to include speed
float easeInOutSine(float t);
bool deleteSequence(String sequenceName); // Declaration
bool isValidServoCommand(const String& command);
void handleHomeCommand(const String& command);
void returnToDefault(int speed);
void executeSinglePosition(const std::array<uint8_t, 6>& targetAngles, int speed);

void setup() {
  Serial.begin(115200);
  while (!Serial) {}

  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed");
    return;
  }

  // Attach servos
  for (int i = 0; i < 6; i++) {
    servos[i].attach(servoPins[i]);
    servos[i].write(90); // Initialize to mid-position
  }

  // Set up LED pin
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Turn off LED initially

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Define HTTP server routes

  // Endpoint to execute a sequence via Wi-Fi
  server.on("/execute_sequence", HTTP_POST, [](AsyncWebServerRequest *request) {
    if (request->hasParam("sequence", true) && request->hasParam("speed", true)) {
        String sequenceName = request->getParam("sequence", true)->value();
        int speed = request->getParam("speed", true)->value().toInt();
        xTaskCreatePinnedToCore(
            [](void *param) {
                String seqName = ((std::pair<String, int>*)param)->first;
                int speed = ((std::pair<String, int>*)param)->second;
                executeSequence(seqName, speed); // Pass speed to executeSequence
                delete (std::pair<String, int>*)param;
                vTaskDelete(NULL);
            },
            "SequenceTask",
            8192,
            new std::pair<String, int>(sequenceName, speed),
            1,
            NULL,
            1
        );
        request->send(200, "text/plain", "Execution Started");
    } else {
        request->send(400, "text/plain", "Bad Request: Missing sequence or speed parameter");
    }
  });

  // Endpoint to list all available sequences
  server.on("/list_sequences", HTTP_GET, [](AsyncWebServerRequest *request) {
    // Get list of sequences
    std::vector<String> sequences = getSequenceList();

    // Create JSON array
    DynamicJsonDocument doc(1024);
    JsonArray array = doc.to<JsonArray>();
    for (const String& seq : sequences) {
      array.add(seq);
    }

    String jsonString;
    serializeJson(doc, jsonString);
    request->send(200, "application/json", jsonString);
  });

  // Start server
  server.begin();
}

void loop() {
  if (isUploading) {
    // Continue receiving file data
    while (Serial.available() > 0 && bytesReceived < uploadFileSize) {
      uint8_t buffer[256];
      size_t toRead = min(uploadFileSize - bytesReceived, sizeof(buffer));
      size_t bytesRead = Serial.readBytes(buffer, toRead);
      uploadFile.write(buffer, bytesRead);
      bytesReceived += bytesRead;
    }

    if (bytesReceived >= uploadFileSize) {
      // All data received, now wait for END_UPLOAD command
      if (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        if (command.startsWith("BEGIN_UPLOAD")) {
          // Handle file start upload
          Serial.println("ACK");  // Send ACK back to confirm ready to receive
        } else if (command.startsWith("END_UPLOAD")) {
          // Handle end of file upload
          Serial.println("UPLOAD_SUCCESS");  // Send upload success message
        } else {
          // Assume it's a chunk of file data and process accordingly
          Serial.println("ACK");  // Send ACK after processing each chunk
        }
      }
    }
  } else if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command == "GET_STORAGE_INFO") {
      // Send storage information to the serial interface
      sendStorageInfo();
    } else if (command.startsWith("BEGIN_UPLOAD")) {
      // Parse filename and filesize
      int firstColon = command.indexOf(':');
      int secondColon = command.indexOf(':', firstColon + 1);
      if (firstColon == -1 || secondColon == -1) {
        Serial.println("ERROR: Invalid BEGIN_UPLOAD format");
        return;
      }
      String filename = command.substring(firstColon + 1, secondColon);
      String filesizeStr = command.substring(secondColon + 1);
      uploadFileSize = filesizeStr.toInt();

      // Check storage limits
      size_t currentUsage = getCurrentStorageUsage();
      size_t newFileSize = uploadFileSize;
      if (currentUsage + newFileSize > MAX_STORAGE_BYTES) {
        Serial.println("STORAGE_FULL");
        return;
      }

      // Check sequence count
      int sequenceCount = getSequenceCount();
      if (sequenceCount >= MAX_SEQUENCES) {
        Serial.println("STORAGE_FULL");
        return;
      }

      // Open file for writing
      uploadFile = SPIFFS.open("/" + filename, FILE_WRITE);
      if (!uploadFile) {
        Serial.println("ERROR: Failed to open file");
        return;
      }
      bytesReceived = 0;
      isUploading = true;
      Serial.println("ACK");
    } else if (command == "LIST_SEQUENCES") {
      // Handle list sequences command
      std::vector<String> sequences = getSequenceList();
      for (const String& seq : sequences) {
        Serial.println(seq);
      }
      Serial.println("END_OF_LIST");
    } else if (command.startsWith("DELETE_SEQUENCE")) {
      String sequenceName = command.substring(command.indexOf(':') + 1);
      bool success = deleteSequence(sequenceName);
      if (success) {
        Serial.println("DELETE_SUCCESS");
      } else {
        Serial.println("ERROR: Sequence Not Found");
      }
    } else if (command.startsWith("EXECUTE_SEQUENCE")) {
      // Handle execute sequence command
      String sequenceName = command.substring(command.indexOf(':') + 1);
      xTaskCreatePinnedToCore(
        [](void *param) {
          String seqName = ((std::pair<String, int>*)param)->first;
          int speed = ((std::pair<String, int>*)param)->second;
          executeSequence(seqName, speed); // Pass speed to executeSequence
          delete (std::pair<String, int>*)param;
          vTaskDelete(NULL);
        },
        "SequenceTask",
        8192,
        new std::pair<String, int>(sequenceName, 5), // Default speed 5
        1,
        NULL,
        1
      );
    } else if (command.startsWith("HOME")) {
      // Handle HOME command
      handleHomeCommand(command);
    } else if (command == "GET_IP") {
      // Send ESP32 IP Address
      Serial.println(WiFi.localIP().toString());
    } else if (isValidServoCommand(command)) {
      // Handle individual servo commands
      handleServoCommand(command);
    } else {
      // Unknown command
      Serial.println("ERROR: Unknown command");
    }
  }
}

// Function Definitions

bool isValidServoCommand(const String& command) {
  int separatorIndex = command.indexOf(':');
  if (separatorIndex == -1) {
    return false;
  }

  String servoIdStr = command.substring(0, separatorIndex);
  if (servoIdStr.length() == 0 || servoIdStr.length() > 1) {
    return false;
  }

  // Ensure servoIdStr is numeric
  for (char c : servoIdStr) {
    if (!isDigit(c)) {
      return false;
    }
  }

  int servoId = servoIdStr.toInt();
  if (servoId < 0 || servoId > 5) {
    return false;
  }

  String angleStr = command.substring(separatorIndex + 1);
  if (angleStr.length() == 0) {
    return false;
  }

  // Check if angleStr is a valid integer
  for (char c : angleStr) {
    if (!isDigit(c)) {
      return false;
    }
  }

  int angle = angleStr.toInt();
  if (angle < 0 || angle > 180) {
    return false;
  }

  return true;
}

void handleServoCommand(const String& command) {
  int separatorIndex = command.indexOf(':');
  if (separatorIndex == -1) {
    // Invalid command format
    return;
  }

  String servoIdStr = command.substring(0, separatorIndex);
  String angleStr = command.substring(separatorIndex + 1);

  int servoId = servoIdStr.toInt();
  int angle = angleStr.toInt();

  // Validate servo ID and angle
  if (servoId < 0 || servoId >= 6 || angle < 0 || angle > 180) {
    // Invalid servo ID or angle
    return;
  }

  // Invert angle if it's the inverted servo
  if (servoId == invertedServoIndex) {
    angle = 180 - angle;
  }

  // Move the servo
  servos[servoId].write(angle);
  Serial.printf("SERVO_UPDATE:%d:%d\n", servoId, angle);
}

size_t getCurrentStorageUsage() {
  size_t total = 0;
  File root = SPIFFS.open("/");
  if (!root) {
    return 0;
  }
  if (!root.isDirectory()) {
    return 0;
  }
  File file = root.openNextFile();
  while (file) {
    if (!file.isDirectory()) {
      total += file.size();
    }
    file = root.openNextFile();
  }
  return total;
}

int getSequenceCount() {
  int count = 0;
  File root = SPIFFS.open("/");
  if (root && root.isDirectory()) {
    File file = root.openNextFile();
    while (file) {
      if (!file.isDirectory() && String(file.name()).endsWith(".bin")) {
        count++;
      }
      file = root.openNextFile();
    }
  }
  return count;
}

std::vector<String> getSequenceList() {
  std::vector<String> sequences;
  File root = SPIFFS.open("/");
  if (root && root.isDirectory()) {
    File file = root.openNextFile();
    while (file) {
      String filename = String(file.name());
      if (!file.isDirectory() && filename.endsWith(".bin")) {
        // Remove leading '/' if present
        if (filename.startsWith("/")) {
          filename = filename.substring(1);
        }
        sequences.push_back(filename);
      }
      file = root.openNextFile();
    }
  }
  return sequences;
}

float easeInOutSine(float t) {
  return -(cos(PI * t) - 1) / 2;
}

// Updated executeSequence function with speed parameter
void executeSequence(String sequenceName, int speed) {
    Serial.println("Executing Sequence: " + sequenceName + " with speed: " + String(speed));
    // Open sequence file
    File seqFile = SPIFFS.open("/" + sequenceName, FILE_READ);
    if (!seqFile) {
        Serial.println("ERROR: Sequence Not Found");
        return;
    }

    // Read number of positions
    uint16_t num_positions;
    if (seqFile.read((uint8_t*)&num_positions, sizeof(num_positions)) != sizeof(num_positions)) {
        Serial.println("ERROR: Failed to read number of positions");
        seqFile.close();
        return;
    }
    Serial.println("Number of Positions: " + String(num_positions));

    // Read all positions into a vector
    std::vector<std::array<uint8_t, 6>> positions;
    for (uint16_t i = 0; i < num_positions; i++) {
        uint8_t angles[6];
        if (seqFile.read(angles, 6) != 6) {
            Serial.println("ERROR: Failed to read angles for position " + String(i));
            seqFile.close();
            return;
        }
        positions.push_back({angles[0], angles[1], angles[2], angles[3], angles[4], angles[5]});
    }
    seqFile.close();

    // Define execution parameters based on speed
    float minDuration = 0.5; // seconds
    float maxDuration = 5.0; // seconds
    float totalDuration = maxDuration - ((speed - 1) / 9.0) * (maxDuration - minDuration);
    int steps = totalDuration * (1000 / 20); // Assuming 20ms intervals

    for (size_t posIndex = 0; posIndex < positions.size(); posIndex++) {
        std::array<uint8_t, 6> startAngles_logical;
        if (posIndex == 0) {
            // Get current servo positions
            for (int i = 0; i < 6; i++) {
                int actual_angle = servos[i].read();
                startAngles_logical[i] = (i == invertedServoIndex) ? (180 - actual_angle) : actual_angle;
            }
        } else {
            startAngles_logical = positions[posIndex - 1];
        }
        std::array<uint8_t, 6> targetAngles_logical = positions[posIndex];

        // Interpolation
        for (int step = 0; step <= steps; step++) {
            float t = (float)step / steps;
            float ease = easeInOutSine(t);

            for (int i = 0; i < 6; i++) {
                int logical_start = startAngles_logical[i];
                int logical_target = targetAngles_logical[i];
                int logical_angle = logical_start + (logical_target - logical_start) * ease;
                logical_angle = constrain(logical_angle, 0, 180); // Ensure within range

                // Convert back to actual angle
                int actual_angle = (i == invertedServoIndex) ? (180 - logical_angle) : logical_angle;

                servos[i].write(actual_angle);
            }

            vTaskDelay(20 / portTICK_PERIOD_MS); // 20ms delay
        }
    }
    Serial.println("Sequence Execution Complete");
}

// Function to get storage information
void sendStorageInfo() {
  size_t totalBytes = SPIFFS.totalBytes();
  size_t usedBytes = SPIFFS.usedBytes();
  Serial.printf("STORAGE_INFO:%u:%u\n", usedBytes, totalBytes);  // Send used and total storage
}

bool deleteSequence(String sequenceName) { // Definition
    String filePath = "/" + sequenceName;
    if (SPIFFS.exists(filePath)) {
        return SPIFFS.remove(filePath);
    } else {
        return false;
    }
}

void handleHomeCommand(const String& command) {
  int separatorIndex = command.indexOf(':');
  int speed = 5; // Default speed
  if (separatorIndex != -1) {
    String speedStr = command.substring(separatorIndex + 1);
    speed = speedStr.toInt();
    if (speed < 1 || speed > 10) {
      speed = 5; // Fallback to default if out of range
    }
  }
  returnToDefault(speed);
}

void returnToDefault(int speed) {
    Serial.println("Starting Home Movement");
    std::array<uint8_t, 6> startAngles_logical;
    for (int i = 0; i < 6; i++) {
        int actual_angle = servos[i].read();
        startAngles_logical[i] = (i == invertedServoIndex) ? (180 - actual_angle) : actual_angle;
    }
    std::array<uint8_t, 6> targetAngles_logical = {90, 90, 90, 90, 90, 90};
    float minDuration = 0.5;
    float maxDuration = 5.0;
    float totalDuration = maxDuration - ((speed - 1) / 9.0) * (maxDuration - minDuration);
    int steps = totalDuration * (1000 / 20);
    Serial.printf("Steps: %d, Duration: %f\n", steps, totalDuration);

    for (int step = 0; step <= steps; step++) {
        float t = (float)step / steps;
        float ease = easeInOutSine(t);

        for (int i = 0; i < 6; i++) {
            int logical_start = startAngles_logical[i];
            int logical_target = targetAngles_logical[i];
            int logical_angle = logical_start + (logical_target - logical_start) * ease;
            logical_angle = constrain(logical_angle, 0, 180);
            int actual_angle = (i == invertedServoIndex) ? (180 - logical_angle) : logical_angle;

            servos[i].write(actual_angle);
            Serial.printf("Servo %d: Step %d, Logical: %d, Actual: %d\n", i, step, logical_angle, actual_angle);
        }
        vTaskDelay(20 / portTICK_PERIOD_MS);
    }
    Serial.println("Home Position Reached");
}
